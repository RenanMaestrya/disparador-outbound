const DisparadorWhatsApp = require("./disparador");

/**
 * Demonstra√ß√£o da verifica√ß√£o de exist√™ncia no WhatsApp
 * ATEN√á√ÉO: Este √© apenas um exemplo. Para testar, voc√™ precisa estar conectado ao WhatsApp.
 */
async function demonstrarVerificacao() {
  console.log("üß™ DEMONSTRA√á√ÉO: VERIFICA√á√ÉO DE EXIST√äNCIA NO WHATSAPP");
  console.log("=======================================================\n");

  // Configura√ß√£o b√°sica
  const config = {
    planilhaPath: "./contatos.xlsx",
    mensagemPadrao: "Teste de verifica√ß√£o",
    minTempoEntreEnvios: 5000,
    maxTempoEntreEnvios: 10000,
    minTempoPausaExtra: 30000,
    maxTempoPausaExtra: 60000,
    enviosParaPausaMin: 5,
    enviosParaPausaMax: 8,
  };

  const disparador = new DisparadorWhatsApp(config);

  // N√∫meros de exemplo para demonstra√ß√£o
  const numerosTeste = [
    { nome: "Teste SP (v√°lido)", telefone: "5511999887766@c.us" },
    { nome: "Teste RJ (v√°lido)", telefone: "5521988776655@c.us" },
    { nome: "Teste SC (v√°lido)", telefone: "554599887766@c.us" },
    { nome: "Teste Inexistente", telefone: "5511111111111@c.us" },
    { nome: "Teste Formato Antigo SP", telefone: "551199887766@c.us" }, // Sem 9¬∫ d√≠gito
    { nome: "Teste Formato Antigo SC", telefone: "5545999887766@c.us" }, // Com 9¬∫ d√≠gito desnecess√°rio
  ];

  console.log("üìã N√∫meros que ser√£o testados:");
  numerosTeste.forEach((contato, index) => {
    console.log(`   ${index + 1}. ${contato.nome}: ${contato.telefone}`);
  });
  console.log("");

  console.log("‚ö†Ô∏è NOTA IMPORTANTE:");
  console.log("   Para funcionar, voc√™ precisa:");
  console.log("   1. Estar conectado ao WhatsApp (escanear QR code)");
  console.log("   2. Ter uma conex√£o est√°vel com a internet");
  console.log("   3. Os n√∫meros de teste devem existir no WhatsApp");
  console.log("");

  console.log("üîç FUNCIONAMENTO DA VERIFICA√á√ÉO:");
  console.log("   1. Testa o n√∫mero original primeiro");
  console.log("   2. Se n√£o existir, gera varia√ß√µes (com/sem 9¬∫ d√≠gito)");
  console.log("   3. Testa cada varia√ß√£o at√© encontrar uma v√°lida");
  console.log("   4. Retorna o n√∫mero correto ou null se n√£o encontrar");
  console.log("");

  console.log("üì± EXEMPLO DE VARIA√á√ïES GERADAS:");
  console.log("   N√∫mero original: 5511999887766");
  console.log("   Varia√ß√µes testadas:");
  console.log("   ‚Üí 551199887766  (remove 9¬∫ d√≠gito)");
  console.log("   ‚Üí 5511999887766 (mant√©m original)");
  console.log("");
  console.log("   N√∫mero original: 554599887766");
  console.log("   Varia√ß√µes testadas:");
  console.log("   ‚Üí 5545999887766 (adiciona 9¬∫ d√≠gito)");
  console.log("   ‚Üí 554599887766  (mant√©m original)");
  console.log("");

  // Simular verifica√ß√£o (sem conex√£o real)
  console.log("üí° EXEMPLO DE EXECU√á√ÉO (simulado):");

  for (const contato of numerosTeste) {
    console.log(`\nüîç Verificando: ${contato.nome}`);

    // Extrair n√∫mero limpo
    const numeroLimpo = contato.telefone.replace(/@c\.us$/, "");
    console.log(`   N√∫mero original: ${numeroLimpo}`);

    // Gerar varia√ß√µes usando a l√≥gica do disparador
    const variacoes = gerarVariacoesExemplo(numeroLimpo);

    if (variacoes.length > 0) {
      console.log(`   Varia√ß√µes a testar:`);
      variacoes.forEach((variacao, index) => {
        console.log(`   ${index + 1}. ${variacao}`);
      });
    } else {
      console.log(`   Nenhuma varia√ß√£o adicional gerada`);
    }

    // Simular resultado
    const existe = !contato.nome.includes("Inexistente");
    if (existe) {
      console.log(`   ‚úÖ Contato encontrado no WhatsApp`);
    } else {
      console.log(
        `   ‚ùå Contato n√£o encontrado ap√≥s testar todas as varia√ß√µes`
      );
    }
  }

  console.log("\nüöÄ PARA USAR EM PRODU√á√ÉO:");
  console.log("   1. Conecte-se ao WhatsApp primeiro: npm start");
  console.log("   2. O sistema verificar√° automaticamente cada contato");
  console.log("   3. S√≥ enviar√° mensagens para n√∫meros que existem");
  console.log("   4. Atualizar√° automaticamente n√∫meros com formato incorreto");
  console.log("");

  console.log("‚ö° BENEF√çCIOS:");
  console.log("   ‚úÖ Reduz falhas de envio");
  console.log("   ‚úÖ Encontra n√∫meros com formato incorreto");
  console.log("   ‚úÖ Economiza tempo e recursos");
  console.log("   ‚úÖ Melhora taxa de entrega");
}

/**
 * Vers√£o simplificada da gera√ß√£o de varia√ß√µes para demonstra√ß√£o
 */
function gerarVariacoesExemplo(numeroOriginal) {
  const variacoes = [];
  const digits = numeroOriginal.replace(/\D/g, "");

  if (digits.startsWith("55") && digits.length >= 12) {
    const ddd = digits.substring(2, 4);
    const numero = digits.substring(4);

    const DDDneedsAnExtraNine = [
      "11",
      "12",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "21",
      "22",
      "24",
      "27",
      "28",
    ];

    if (DDDneedsAnExtraNine.includes(ddd)) {
      if (numero.length === 9 && numero.startsWith("9")) {
        variacoes.push(`55${ddd}${numero.substring(1)}`);
      } else if (numero.length === 8) {
        variacoes.push(`55${ddd}9${numero}`);
      }
    } else {
      if (numero.length === 9 && numero.startsWith("9")) {
        variacoes.push(`55${ddd}${numero.substring(1)}`);
      } else if (numero.length === 8) {
        variacoes.push(`55${ddd}9${numero}`);
      }
    }
  }

  return variacoes.filter((v) => v !== digits);
}

// Executar demonstra√ß√£o se o arquivo for chamado diretamente
if (require.main === module) {
  demonstrarVerificacao().catch(console.error);
}

module.exports = { demonstrarVerificacao };
